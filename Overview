Source - http://tldp.org/LDP/sag/html/sag.html#INTRO

Linux = kernel + some system programs + application programs for doing work. 


Kernel - It keeps track of files on the disk, starts programs and runs them concurrently, assigns memory and other resources to various 
processes, receives packets from and sends packets to the network, and so on. The kernel does very little by itself, but it provides 
tools with which all services can be built

The system programs use the tools provided by the kernel to implement the various services required from an operating system. System 
programs, and all other programs, run `on top of the kernel', in what is called the user mode
A word processor is an application; mount is a system program.

-- SEE DIAGRAM OF LINUX KERNEL COMPONENTS AT - http://tldp.org/LDP/sag/html/sag.html#INTRO

1. Memory Management - Memory management takes care of assigning memory areas and swap space areas to processes, parts of the kernel, and 
for the buffer cache
2. Process Management - Process management creates processes, and implements multitasking by switching the active process on the processor.

3. Hardware device driver - the kernel contains a hardware device driver for each kind of hardware it supports. all disk drivers look 
alike to the rest of the kernel, i.e., they all have operations like `initialize the drive', `read sector N', and `write sector N'.

4. Virtual filesystem (VFS) layer - It abstracts the filesystem operations away from their implementation. Each filesystem type provides 
an implementation of each filesystem operation. When some entity tries to use a filesystem, the request goes via the VFS, which routes 
the request to the proper filesystem driver.

--- Major services in Linux system - 
1. init 
2. logins from terminal
3. Syslog
4. Periodic command execution: cron and at
5. Graphical user interface - GUI
6. Networking
7. Network logins
8. Network file systems - NFS
9. Mail
10. Printing
11. The filesystem layout

------------------------
1. init - init is started as the first process of every UNIX system, as the last thing the kernel does when it boots. When init starts, 
it continues the boot process by doing various startup chores (checking and mounting filesystems, starting daemons, etc).Linux allows 
for up to 10 runlevels, 0-9. It can vary by distribution falvour .  /etc/inittab

Runlevel 0 - system halt'
Runlevel 1 - single user mode
Runlevel 2 - 
Runlevel 3 - multi user
Runlevel 5 - multi user + GUI 
Runlevel 6 - system reboot

init makes sure getty is working (to allow users to log in) and to adopt orphan processes (processes whose parent has died; in UNIX 
all processes must be in a single tree, so orphans must be adopted).When the system is shut down, it is init that is in charge of 
killing all other processes, unmounting all filesystems and stopping the processor, along with anything else it has been configured 
to do


2. Logins from terminals - 
 init starts a separate instance of getty for each terminal upon which logins are to be allowed. getty reads the username and runs the 
 loginprogram, which reads the password. If the username and password are correct, login runs the shell. When the shell terminates, 
 i.e., the user logs out, or when login terminated because the username and password didn't match, init notices this and starts a new 
 instance of getty. The kernel has no notion of logins, this is all handled by the system programs.

3. Syslog - 
This is to capture kernal error, warning, and other messages.

4. Periodic command execution: cron and at - 
Real life application could be -  For example, the system administrator might want to run a command to clean the directories with 
temporary files (/tmp and /var/tmp) from old files, to keep the disks from filling up, since not all programs clean up after themselves 
correctly

6. Networking
Most basic services (filesystems, printing, backups, etc) can be done over the network between two different computers.

7. Network login- 
Network logins have, instead of a herd of gettys, a single daemon per way of logging in (telnet and ssh have separate daemons) that 
listens for all incoming login attempts. When it notices one, it starts a new instance of itself to handle that single attempt; the 
original instance continues to listen for other attempts. The new instance works similarly to getty.

8. Network File System - 
One of the more useful things that can be done with networking services is sharing files via a network file system. Depending on your 
network this could be done over the Network File System (NFS), or over the Common Internet File System (CIFS). NFS is typically a 'UNIX'
based service. In Linux, NFS is supported by the kernel. CIFS however is not. In Linux, CIFS is supported by Samba http://www.samba.org.

With a network file system any file operations done by a program on one machine are sent over the network to another computer. This 
fools the program to think that all the files on the other computer are actually on the computer the program is running on.	This makes 
information sharing extremely simple, since it requires no modifications to programs.

9. Mail - 
The mail system consists of many programs. The delivery of mail to local or remote mailboxes is done by one program (the mail transfer 
agent (MTA) , e.g., sendmail or postfix ), while the programs users use are many and varied (mail user agent (MUA) , e.g., pine , or 
evolution .	The mailboxes are usually stored in /var/spool/mail until the user's MUA retrieves them.

10. The Filesystem layout  - 
The filesystem is divided into many parts; usually along the lines of a root filesystem with /bin , /lib , /etc , /dev , and a few 
others; a /usr filesystem with programs and unchanging data; /var filesystem with changing data (such as log files); and a /home for
everyone's personal files.	Depending on the hardware configuration and the decisions of the system administrator, the division can be 
different; it can even be all in one filesystem.




